{{- range $ns := .Values.catalogNamespaces }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ $ns.name }}
  {{- if or $ns.groups $ns.users }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: babylon-user-catalog-access
  namespace: {{ $ns.name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: babylon-user-catalog-access
subjects:
    {{- range $group := $ns.groups }}
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: {{ $group }}
    {{- end }}
    {{- range $user := $ns.users }}
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: {{ $user }}
    {{- end }}
  {{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: babylon:anarchy:catalog-access
  namespace: {{ $ns.name }}
  annotations:
    description: >-
      Access for anarchy to catalog items and secrets.
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: babylon:anarchy:catalog-access
subjects:
  {{- range $anarchyNamespace := $.Values.anarchy.namespaces }}
- kind: ServiceAccount
  name: anarchy
  namespace: {{ $anarchyNamespace.name }}
    {{- range $runner := ($anarchyNamespace.runners | default (list (dict "name" "default"))) }}
      {{- with $serviceAccountName := (hasKey $runner "serviceAccountName") | ternary $runner.serviceAccountName (printf "anarchy-runner-%s" $runner.name) }}
- kind: ServiceAccount
  name: {{ $serviceAccountName }}
  namespace: {{ $anarchyNamespace.name }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
