{{- if .Values.crossClusterBackup.enable -}}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.crossClusterBackup.namespace }}
  annotations:
    openshift.io/display-name: {{ .Values.crossClusterBackup.namespace }}
    openshift.io/description: Babylon cross-cluster-backup
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reader
  namespace: {{ .Values.crossClusterBackup.namespace }}
  annotations:
    openshift.io/description: >-
      Service account used for read access to peer cluster.
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: restore
  namespace: {{ .Values.crossClusterBackup.namespace }}
  annotations:
    openshift.io/description: >-
      Service account used to restore backups.
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Values.crossClusterBackup.clusterRoleName }}
  annotations:
    openshift.io/description: >-
      RBAC for access to read babylon resources from peer cluster.
rules:
- apiGroups:
  - {{ .Values.anarchy.apiGroup }}
  resources:
  - anarchyactions
  - anarchyruns
  - anarchysubjects
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - babylon.gpte.redhat.com
  resources:
  - workshops
  - workshopprovisions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - {{ .Values.poolboy.apiGroup }}
  resources:
  - resourceclaims
  - resourcehandles
  - resourcepools
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.crossClusterBackup.clusterRoleName }}
  annotations:
    openshift.io/description: >-
      RBAC for access to read babylon resources from peer cluster.
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Values.crossClusterBackup.clusterRoleName }}
subjects:
- kind: ServiceAccount
  name: reader
  namespace: {{ .Values.crossClusterBackup.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.crossClusterBackup.clusterRoleName }}-restore
  annotations:
    openshift.io/description: >-
      RBAC for access to read babylon resources from peer cluster.
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: restore
  namespace: {{ .Values.crossClusterBackup.namespace }}
---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: cross-cluster-restore
  namespace: {{ .Values.crossClusterBackup.namespace }}
parameters:
- description: Backup to Restore
  displayName: Backup
  name: BACKUP
  required: true
  value: manual
- description: Image for restore Job
  displayName: Image
  name: IMAGE
  required: true
  value: quay.io/redhat-pfe/replik8s:{{ .Values.crossClusterBackup.replik8sVersion }}
- description: Restore mode, can be "manual", "latest", or backup timestamp.
  displayName: RESTORE
  name: RESTORE
  required: true
  value: manual
objects:
- apiVersion: batch/v1
  kind: Job
  metadata:
    generateName: cross-cluster-restore-
    namespace: {{ .Values.crossClusterBackup.namespace }}
    labels:
      cross-cluster-restore: ''
  spec:
    backoffLimit: 0
    completions: 1
    parallelism: 1
    template:
      spec:
        serviceAccountName: restore
        restartPolicy: Never
        containers:
        - name: restore
          command:
          - /bin/bash
          - -c
          - |
            cat >/opt/app-root/bin/babylon-restore <<EOF
            #!/bin/bash
            set -o errexit
            if [ -z "\${1}" ] || [ ! -e "\${1}" ]; then
                echo "Usage: babylon-restore BACKUP_PATH"
                exit 1
            fi
            /opt/app-root/bin/replik8s-restore "\${1}" \\
              --create-namespaces \\
              --restore-status-on='*' \\
              --stop-operator-selectors \\
                app.kubernetes.io/name=anarchy \\
                app.kubernetes.io/name=poolboy
            echo "Restore Complete"
            rm -f /tmp/restore-running
            EOF
            chmod a+x /opt/app-root/bin/babylon-restore

            if [ "${RESTORE}" == "manual" ]; then
                touch /tmp/restore-running
                while [ -e /tmp/restore-running ]; do sleep 1; done
                exit 0
            elif [ "${RESTORE}" == "latest" ]; then
                /opt/app-root/bin/babylon-restore "/data/babylon-cross-cluster-backup/babylon/latest"
            else
                /opt/app-root/bin/babylon-restore "/data/babylon-cross-cluster-backup/babylon/recovery-points/${RESTORE}"
            fi
          env:
          - name: RESTORE
            value: ${RESTORE}
          image: ${IMAGE}
          imagePullPolicy: Always
          volumeMounts:
          - mountPath: /data/
            name: data
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: replik8s
{{- end }}
