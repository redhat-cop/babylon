{{- if .Values.crossClusterBackup.enable -}}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.crossClusterBackup.namespace }}
  annotations:
    openshift.io/display-name: {{ .Values.crossClusterBackup.namespace }}
    openshift.io/description: Babylon cross-cluster-backup
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reader
  namespace: {{ .Values.crossClusterBackup.namespace }}
  annotations:
    openshift.io/description: >-
      Service account used for read access to peer cluster.
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: restore
  namespace: {{ .Values.crossClusterBackup.namespace }}
  annotations:
    openshift.io/description: >-
      Service account used to restore backups.
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Values.crossClusterBackup.clusterRoleName }}
  annotations:
    openshift.io/description: >-
      RBAC for access to read babylon resources from peer cluster.
rules:
- apiGroups:
  - {{ .Values.anarchy.apiGroup }}
  resources:
  - anarchyactions
  - anarchysubjects
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - {{ .Values.poolboy.apiGroup }}
  resources:
  - resourceclaims
  - resourcehandles
  - resourcepools
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.crossClusterBackup.clusterRoleName }}
  annotations:
    openshift.io/description: >-
      RBAC for access to read babylon resources from peer cluster.
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Values.crossClusterBackup.clusterRoleName }}
subjects:
- kind: ServiceAccount
  name: reader
  namespace: {{ .Values.crossClusterBackup.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.crossClusterBackup.clusterRoleName }}-restore
  annotations:
    openshift.io/description: >-
      RBAC for access to read babylon resources from peer cluster.
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: restore
  namespace: {{ .Values.crossClusterBackup.namespace }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cross-cluster-backup
  namespace: {{ .Values.crossClusterBackup.namespace }}
  annotations:
    openshift.io/description: >-
      Storage for Babylon backup YAML data.
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.crossClusterBackup.storageSize }}
{{ if .Values.crossClusterBackup.kubeConfig }}
---
apiVersion: v1
kind: Secret
metadata:
  name: cross-cluster-backup
  namespace: {{ .Values.crossClusterBackup.namespace }}
  annotations:
    openshift.io/description: >-
      Secret containing kubeconfig.yaml for cross-cluster access
data:
  kubeconfig.yaml: {{ .Values.crossClusterBackup.kubeConfig | b64enc }}
{{ end }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: cross-cluster-backup
  namespace: {{ .Values.crossClusterBackup.namespace }}
spec:
  schedule: '*/20 * * * *'
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  suspend: false
  jobTemplate:
    spec:
      # Retry twice on failure
      backoffLimit: 2
      template:
        spec:
          serviceAccountName: default
          restartPolicy: Never
          containers:
          - name: oc-cli
            command:
            - /bin/bash
            - -xc
            - |
              set -e
              rm -rf /backup/in-progress
              mkdir /backup/in-progress
              oc --kubeconfig=/secret/kubeconfig.yaml get anarchysubjects -n anarchy-operator -o yaml > /backup/in-progress/anarchysubjects.yaml
              oc --kubeconfig=/secret/kubeconfig.yaml get anarchyactions -n anarchy-operator -o yaml > /backup/in-progress/anarchyactions.yaml
              oc --kubeconfig=/secret/kubeconfig.yaml get resourcepools -n poolboy -o yaml > /backup/in-progress/resourcepools.yaml
              oc --kubeconfig=/secret/kubeconfig.yaml get resourcehandles -n poolboy -o yaml > /backup/in-progress/resourcehandles.yaml
              oc --kubeconfig=/secret/kubeconfig.yaml get resourceclaims --all-namespaces -o yaml > /backup/in-progress/resourceclaims.yaml
              TIMESTAMP="$(date -u +%FT%TZ)"
              mv /backup/in-progress "/backup/${TIMESTAMP}"
              rm -f /backup/latest
              ln -s "${TIMESTAMP}" /backup/latest
              # Remove backup dirs older than 3 days
              find /backup/ -maxdepth 1 -type d -regextype posix-egrep -regex '.*/[0-9]{4}-[0-9]{2}-[0-9]{2}T.*' -mmin +$((3 * 24 * 60)) -exec rm -rf {} \; || :
            image: image-registry.openshift-image-registry.svc:5000/openshift/cli
            imagePullPolicy: Always
            volumeMounts:
            - mountPath: /backup/
              name: backup
            - mountPath: /secret/
              name: secret
              readOnly: true
          volumes:
          - name: backup
            persistentVolumeClaim:
              claimName: cross-cluster-backup
          - name: secret
            secret:
              secretName: cross-cluster-backup
---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: cross-cluster-restore
  namespace: {{ .Values.crossClusterBackup.namespace }}
parameters:
- description: Backup to Restore
  displayName: Backup
  name: BACKUP
  required: true
  value: manual
- description: Image for restore Job
  displayName: Image
  name: IMAGE
  required: true
  value: quay.io/redhat-gpte/replik8s:v0.3.2
- description: Restore mode, can be "manual", "latest", or backup timestamp.
  displayName: RESTORE
  name: RESTORE
  required: true
  value: manual
objects:
- apiVersion: batch/v1
  kind: Job
  metadata:
    generateName: cross-cluster-restore-
    namespace: {{ .Values.crossClusterBackup.namespace }}
    labels:
      cross-cluster-restore: ''
  spec:
    backoffLimit: 1
    completions: 1
    parallelism: 1
    template:
      spec:
        serviceAccountName: restore
        restartPolicy: Never
        containers:
        - name: restore
          command:
          - /bin/bash
          - -c
          - |
            cat >/opt/app-root/bin/babylon-restore <<EOF
            #!/bin/bash
            set -o errexit
            if [ -z "\${1}" ] || [ ! -e "\${1}" ]; then
                echo "Usage: babylon-restore BACKUP_PATH"
                exit 1
            fi
            /opt/app-root/bin/replik8s-restore "\${1}" \\
              --restore-status-on \\
                anarchysubjects.anarchy.gpte.redhat.com \\
                anarchyactions.anarchy.gpte.redhat.com \\
                resourceclaims.poolboy.gpte.redhat.com \\
              --stop-operators \\
                anarchy-operator/anarchy \\
                poolboy/poolboy
            echo "Restore Complete"
            rm -f /tmp/restore-running
            EOF
            chmod a+x /opt/app-root/bin/babylon-restore

            if [ "${RESTORE}" == "manual" ]; then
                touch /tmp/restore-running
                while [ -e /tmp/restore-running ]; do sleep 1; done
                exit 0
            else
                /opt/app-root/bin/babylon-restore "/backup/${RESTORE}"
            fi
          env:
          - name: RESTORE
            value: ${RESTORE}
          image: ${IMAGE}
          imagePullPolicy: Always
          volumeMounts:
          - mountPath: /backup/
            name: backup
          - mountPath: /secret/
            name: secret
            readOnly: true
        volumes:
        - name: backup
          persistentVolumeClaim:
            claimName: cross-cluster-backup
        - name: secret
          secret:
            secretName: cross-cluster-backup
{{- end }}
