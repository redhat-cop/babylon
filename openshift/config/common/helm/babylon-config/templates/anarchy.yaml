{{ range $anarchyNamespace := .Values.anarchy.namespaces }}
  {{- if or $anarchyNamespace.create (not (hasKey $anarchyNamespace "create")) }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ $anarchyNamespace.name }}
    {{- with $anarchyCommune := $anarchyNamespace.commune }}
  annotations:
    helm.sh/resource-policy: keep
    meta.helm.sh/release-name: {{ $anarchyNamespace.name }}
    meta.helm.sh/release-namespace: {{ $.Values.operatorNamespace }}
  labels:
    app.kubernetes.io/instance: {{ $anarchyNamespace.name }}
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: anarchy
      {{- range $anarchyRunner := ($anarchyCommune.runners | default (list (dict "name" "default"))) }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: anarchy-runner-{{ $anarchyRunner.name }}
  namespace: {{ $anarchyNamespace.name }}
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: anarchy-runner-{{ $anarchyRunner.name }}
  namespace: {{ $anarchyNamespace.name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: anarchy-runner-{{ $anarchyRunner.name }}
subjects:
- kind: ServiceAccount
  name: anarchy-runner-{{ $anarchyRunner.name }}
  namespace: {{ $anarchyNamespace.name }}
      {{- end }}
---
apiVersion: {{ $.Values.anarchy.apiGroup }}/v1
kind: AnarchyCommune
metadata:
  name: {{ $anarchyNamespace.name }}
  namespace: {{ $.Values.operatorNamespace }}
spec:
  namespace:
    create: false
    name: {{ $anarchyNamespace.name }}
    {{- $anarchyCommune | toYaml | nindent 2 }}
  replicaCount: {{ $anarchyCommune.replicaCount | default 1 }}
  runners:
      {{- range $anarchyRunner := ($anarchyCommune.runners | default (list (dict "name" "default"))) }}
  - name: default
    consecutiveFailureLimit: {{ $anarchyRunner.consecutiveFailureLimit | default(10) }}
    maxReplicas: {{ $anarchyRunner.maxReplicas | default ($anarchyRunner.minReplicas | default 1 | mul 5) }}
    minReplicas: {{ $anarchyRunner.minReplicas | default 1 }}
    runLimit: {{ $anarchyRunner.runLimit | default(100) }}
    scaleUpDelay: {{ $anarchyRunner.scaleUpDelay | default("5m") }}
    scaleUpThreshold: {{ $anarchyRunner.scaleUpThreshold | default(15) }}
    scalingCheckInterval: {{ $anarchyRunner.scalingCheckInterval | default("1m") }}
    resources:
        {{- with $anarchyRunnerResources := ($anarchyRunner.resources | default (dict "_" "_")) }}
      limits:
          {{- with $anarchyRunnerResourceLimits := ($anarchyRunnerResources.limits | default (dict "_" "_")) }}
        cpu: "{{ $anarchyRunnerResourceLimits.cpu | default "1" }}"
        memory: "{{ $anarchyRunnerResourceLimits.memory | default "512Mi" }}"
          {{- end }}
      requests:
          {{- with $anarchyRunnerResourceRequests := ($anarchyRunnerResources.requests | default (dict "_" "_")) }}
        cpu: "{{ $anarchyRunnerResourceRequests.cpu | default "500m" }}"
        memory: "{{ $anarchyRunnerResourceRequests.memory | default "256Mi" }}"
          {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}

  {{- with $babylonTower := ($anarchyNamespace.babylonTower | default $.Values.babylonTower) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: babylon-tower
  namespace: {{ $anarchyNamespace.name }}
  labels:
    babylon.gpte.redhat.com/ansible-control-plane: {{ $babylonTower.hostname }}
type: Opaque
data:
  hostname: {{ $babylonTower.hostname | b64enc }}
  password: {{ $babylonTower.password | b64enc }}
  user: {{ $babylonTower.user | b64enc }}
  {{- end }}

  {{- range $secret := (concat $.Values.anarchy.secrets ($anarchyNamespace.secrets | default list)) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secret.name }}
  namespace: {{ $anarchyNamespace.name }}
type: Opaque
data:
    {{- range $k, $v := $secret.data }}
  {{ $k }}: {{ $v | b64enc }}
    {{- end }}
  {{- end }}

  {{- range $runner := ($anarchyNamespace.runners | default (list (dict "name" "default"))) }}
    {{- with $serviceAccountName := (hasKey $runner "serviceAccountName") | ternary $runner.serviceAccountName (printf "anarchy-runner-%s" $runner.name) }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: poolboy:{{ $anarchyNamespace.name }}:{{ $serviceAccountName }}
  annotations:
    description: >-
      This cluster role binding allows an anarchy runner to manage poolboy claims and handles.
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: babylon:anarchy:poolboy-access
subjects:
- kind: ServiceAccount
  name: {{ $serviceAccountName }}
  namespace: {{ $anarchyNamespace.name }}
    {{ end }}
  {{ end }}
{{ end }}
