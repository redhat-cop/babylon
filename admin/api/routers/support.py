from typing import List
import logging
import json
from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import JSONResponse
from schemas import SupportCreate, SupportResponse
import aiohttp
import asyncio
import os

logger = logging.getLogger('babylon-api')

tags = ["support"]

router = APIRouter(tags=tags)

# Service Now params:
SERVICENOW_AUTH_SECRET = os.getenv('SERVICENOW_AUTH_SECRET')
SERVICENOW_FORM_ID = os.getenv('SERVICENOW_FORM_ID')
# WORKSHOP_FORM_URL = f"https://redhat.service-now.com/api/sn_sc/v1/servicecatalog/items/{SERVICENOW_FORM_ID}/order_now"
WORKSHOP_FORM_URL = f"https://redhatqa.service-now.com/api/sn_sc/v1/servicecatalog/items/{SERVICENOW_FORM_ID}/order_now"
SYS_USER_URL = "https://redhatqa.service-now.com/api/now/table/sys_user"
API_HEADERS={"Authorization": f"Basic {SERVICENOW_AUTH_SECRET}"}

async def create_ticket(support_create):
    async with aiohttp.ClientSession(headers=API_HEADERS) as session:
        async with session.post(WORKSHOP_FORM_URL, json=support_create) as response:
            return await response.json()

async def get_user_sys_id(email):
    async with aiohttp.ClientSession(headers=API_HEADERS) as session:
        params = {"email": email}
        async with session.get(SYS_USER_URL, params=params) as response:
            return await response.json()


@router.post("/api/admin/v1/workshop/support",
             response_model=SupportResponse,
             summary="Create support ticket")
async def create_support_ticket(support_create: SupportCreate):
    try:
        users_result = await get_user_sys_id(support_create.email)
        user_sys_id = users_result["result"][0]["sys_id"]
        logger.info(user_sys_id)
        support_create = create_support_request_json(support_create, user_sys_id)
        ticket = await create_ticket(support_create)
        logger.info(ticket)
        return {
            "sys_id": ticket["result"]["sys_id"],
            "request_number": ticket["result"]["request_number"],
            "request_id": ticket["result"]["request_id"]
        }
    except Exception as e:
        logger.error(f"Error creating support ticket: {e}", stack_info=True)
        raise HTTPException(status_code=500, detail="Error support ticket. Contact the administrator") from e


def create_support_request_json(support_create, user_sys_id):
    return {
        "sysparm_quantity":1,
        "variables":{
            "number_of_attendees":f"{support_create.number_of_attendees}",
            "provide_additional_details":"Auto-Generated by demo.redhat.com portal",
            "workshop_or_demo_name":f"{support_create.name}",
            "workshop_or_demo_start_date":f"{support_create.start_time}",
            "what_is_the_sfdc_opportunity":f"{support_create.sfdc}",
            "general_event_name":f"{support_create.event_name}",
            "other_facilitators_e_mail_addresses":f"{support_create.email}",
            "universal_watch_list":f"{support_create.email}",
            "will_you_be_performing_initial_setup_of_your_environment_or_do_you_require_assistance":"i_will_perform_setup",
            "provide_your_guid_or_the_url_from_your_browser_linking_to_your_workshop_service":f"{support_create.url}",
            "requested_for_rf":"true",
            "workshop_or_demo_end_date_and_time":f"{support_create.end_time}",
            "number_of_attendees_demo":f"{support_create.number_of_attendees}",
            "what_do_you_need_help_with":"i_need_help_ with_a_future_demo_or_workshop",
            "workshop_or_demo_start_date_and_time":f"{support_create.start_time}",
            "email":f"{support_create.email}",
            "do_you_need_to_remove_auto_stop":"No",
            "requested_for": f"{user_sys_id}",
        },
        "get_portal_messages":"true",
        "sysparm_no_validation":"true"
    }