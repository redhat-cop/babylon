---
name: ratings-publish
on:
  push:
    branches-ignore:
      - "*"
    tags:
      - "ratings-v[0-9]*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to be published (e.g., v0.1.2)"
        required: true
        type: string
        default: "latest"

jobs:
  publish:
    env:
      IMAGE_NAME: babylon-ratings
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Get image tags
        id: image_tags
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            RELEASE=${{ github.event.inputs.version }}
            VERSION=${{ github.event.inputs.version }}
            # For workflow_dispatch, only create the specific version tag
            IMAGE_TAGS=(
              "${{ secrets.REGISTRY_URI }}/${{ secrets.GPTE_REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:${VERSION}"
            )
          else
            RELEASE=${GITHUB_REF#refs/tags/ratings-}
            VERSION=${RELEASE/-*/}
            # For tag-based triggers, create latest, minor and patch tags
            if [[ "${VERSION}" == "${RELEASE}" ]]; then
              IMAGE_TAGS=(
                "${{ secrets.REGISTRY_URI }}/${{ secrets.GPTE_REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest"
                "${{ secrets.REGISTRY_URI }}/${{ secrets.GPTE_REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:${VERSION%.*}"
                "${{ secrets.REGISTRY_URI }}/${{ secrets.GPTE_REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:${VERSION}"
              )
            fi
          fi

          echo "RELEASE=${RELEASE}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          if [[ -n "${IMAGE_TAGS[*]}" ]]; then
            ( IFS=$','; echo "IMAGE_TAGS=${IMAGE_TAGS[*]}" >> $GITHUB_OUTPUT )
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
        if: steps.image_tags.outputs.IMAGE_TAGS

      - name: Login to Image Registry
        uses: docker/login-action@v3
        if: steps.image_tags.outputs.IMAGE_TAGS
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.GPTE_REGISTRY_USERNAME }}
          password: ${{ secrets.GPTE_REGISTRY_PASSWORD }}

      - name: Build and push
        if: steps.image_tags.outputs.IMAGE_TAGS
        uses: docker/build-push-action@v6
        with:
          context: ratings
          file: ratings/Dockerfile
          push: true
          tags: ${{ steps.image_tags.outputs.IMAGE_TAGS }}
          cache-from: type=gha,scope=ratings-api
          cache-to: type=gha,mode=max,scope=ratings-api
