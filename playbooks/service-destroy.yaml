---
# This Ansible Playbook show how to delete a service in Babylon.
- name: Babylon Integration
  hosts: localhost
  gather_facts: false
  vars:
    # Vars to override as extra-vars
    account: CHANGEME
    catalog_item: CHANGEME
    catalog_stage: CHANGE ME dev|test|prod
    catalog_item_params_file: CHANGEME
    kubeconfig: CHANGEME
    cloudforms_username: CHANGEME

    # After that don't touch
    user_namespace: user-{{ cloudforms_username | replace('_', '-') | replace('.', '-') }}
    catalog_item_name: "{{ account | replace('_', '-') }}.{{ catalog_item | lower | regex_replace('_', '-') }}.{{ catalog_stage }}"

  tasks:
  - name: Include vars
    include_vars:
      file: "{{ catalog_item_params_file }}"
      name: catalog_item_params

  - name: Show catalog_item_params
    debug:
      var: catalog_item_params
      verbosity: 2

  - name: Check that guid is set in catalog_item_params
    fail:
      msg: guid must be defined in catalog_item_params
    when: >-
      "guid" not in vars.catalog_item_params
      or vars.catalog_item_params.guid == ''

  - name: Set resource_claim_name from catalog_item_params
    set_fact:
      resource_claim_name: "{{ catalog_item_name }}-{{ vars.catalog_item_params.guid }}"

  - name: Get resourceClaim
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: poolboy.gpte.redhat.com/v1
      kind: ResourceClaim
      namespace: "{{ user_namespace }}"
      name: "{{ resource_claim_name }}"
    register: r_claim

  - name: Delete with resource claim
    when: r_claim.resources|length > 0
    block:
    - name: Set subject_name and subject_namespace from claim
      set_fact:
        subject_name: "{{ __subject.metadata.name }}"
        subject_namespace: "{{ __subject.metadata.namespace }}"
      vars:
        __subject: "{{ r_claim.resources[0].status.resources[0].state }}"

    - name: Delete resource claim {{ resource_claim_name }}
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: absent
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
        namespace: "{{ user_namespace }}"
        name: "{{ resource_claim_name }}"

    - name: Wait for the Tower deployerJob to start in the AnarchySubject
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: anarchy.gpte.redhat.com/v1
        kind: AnarchySubject
        namespace: "{{ subject_namespace }}"
        name: "{{ subject_name }}"
      register: r_subject
      retries: "{{ wait_retries | default(30) }}"
      delay: 2
      until: >-
        'destroying' == r_subject.resources[0].spec.vars.current_state|default('')

    - name: Save the tower job
      set_fact:
        tower_job: "{{ r_subject.resources[0].status.towerJobs.destroy.deployerJob }}"

  - name: Delete without resource claim
    when: r_claim.resources|length == 0
    block:
    - name: Get AnarchySubjects
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: anarchy.gpte.redhat.com/v1
        kind: AnarchySubject
        namespace: anarchy-operator
      register: r_anarchy_subjects

    - name: Set subject_name and subject_namespace if anarchy subject found
      set_fact:
        subject: "{{ __subject }}"
        subject_name: "{{ __subject.metadata.name }}"
        subject_namespace: "{{ __subject.metadata.namespace }}"
      vars:
        __subject_query: >-
          [?
            metadata.annotations."poolboy.gpte.redhat.com/resource-claim-name"==`{{ resource_claim_name | to_json }}` &&
            metadata.annotations."poolboy.gpte.redhat.com/resource-claim-namespace"==`{{ user_namespace | to_json }}`
          ]|[0]
        __subject: "{{ r_anarchy_subjects.resources | json_query(__subject_query) }}"
      when: __subject != ''

    - name: Exit if not found
      when: subject is not defined
      block:
      - debug:
          msg: "No resource claim or subject found."

      - name: Write tower information to yaml file
        copy:
          dest: "{{ output_dir }}/results.rc"
          content: |
            export SKIP_TOWER_LOGS=yes

      - meta: end_play

    - name: Create destroy action for {{ subject_name }}
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          api_version: anarchy.gpte.redhat.com/v1
          kind: AnarchyAction
          metadata:
            # k8s module currently does not support generateName...
            # https://github.com/ansible-collections/community.kubernetes/issues/186
            # Need to generate a name while keeping the total length <= 63
            name: "{{ (subject_name ~ '-destroy-')[:58] ~ lookup('password', '/dev/null chars=ascii_lowercase,digits length=5') }}"
            namespace: anarchy-operator
          spec:
            action: destroy
            callbackToken: "{{ lookup('password', '/dev/null length=32 chars=hexdigits') }}"
            subjectRef:
              apiVersion: anarchy.gpte.redhat.com/v1
              kind: AnarchySubject
              name: "{{ subject_name }}"
              namespace: "{{ subject_namespace }}"

    - name: Wait for the new Tower deployerJob to start in the AnarchySubject
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: anarchy.gpte.redhat.com/v1
        kind: AnarchySubject
        namespace: "{{ subject_namespace }}"
        name: "{{ subject_name }}"
      register: r_subject
      retries: "{{ wait_retries | default(30) }}"
      delay: 2
      vars:
        deployer_job: "{{ r_subject.resources[0].status.towerJobs.destroy.deployerJob | default('') }}"
      # Wait until destroy deployerJob is set and is different from previous attempt
      until: >-
        deployer_job != '' and
        deployer_job != subject.status.towerJobs.destroy.deployerJob | default('')

    - name: Save the tower job
      set_fact:
        tower_job: "{{ r_subject.resources[0].status.towerJobs.destroy.deployerJob }}"

  - name: Get Tower credentials and access information
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: v1
      kind: Secret
      namespace: anarchy-operator
      name: babylon-tower
    register: r_babylon_tower_secret

  - fail:
      msg: "babylon-tower secret not found"
    when: r_babylon_tower_secret.resources | length == 0

  - set_fact:
      babylon_tower_secret: "{{ r_babylon_tower_secret.resources[0] }}"

  - name: Save tower secret
    set_fact:
      tower_hostname: "{{ babylon_tower_secret.data.hostname | b64decode }}"
      tower_user: "{{ babylon_tower_secret.data.user | b64decode }}"
      tower_password: "{{ babylon_tower_secret.data.password | b64decode }}"

  - name: Create output_dir/secrets
    file:
      path: "{{ output_dir }}/secrets"
      state: directory
      mode: 0700

  - name: Write tower information to yaml file
    copy:
      dest: "{{ output_dir }}/secrets/tower.rc"
      content: |
        export TOWER_HOST="https://{{ tower_hostname }}"
        export TOWER_VERIFY_SSL=false
        export TOWER_USERNAME={{ tower_user | to_json }}
        export TOWER_PASSWORD={{ tower_password | to_json }}
        export TOWER_JOB={{ tower_job | to_json }}
