---
# This Ansible Playbook show how to delete a service in Babylon.
- name: Babylon Integration
  hosts: localhost
  gather_facts: false
  vars:
    # Vars to override as extra-vars
    account: CHANGEME
    catalog_item: CHANGEME
    catalog_stage: CHANGE ME dev|test|prod
    catalog_item_params_file: CHANGEME
    kubeconfig: CHANGEME

    # After that don't touch
    catalog_item_name: "{{ account | replace('_', '-') }}.{{ catalog_item | lower | regex_replace('_', '-') }}.{{ catalog_stage }}"

  tasks:
  - name: Include vars
    include_vars:
      file: "{{ catalog_item_params_file }}"
      name: catalog_item_params

  - name: Show catalog_item_params
    debug:
      var: catalog_item_params
      verbosity: 2

  - name: Check that guid is set in catalog_item_params
    fail:
      msg: guid must be defined in catalog_item_params
    when: >-
      "guid" not in vars.catalog_item_params
      or vars.catalog_item_params.guid == ''

  - name: Check that uuid is set in catalog_item_params
    fail:
      msg: uuid must be defined in catalog_item_params
    when: >-
      "uuid" not in vars.catalog_item_params
      or vars.catalog_item_params.uuid == ''

  - name: Set vars from catalog_item_params
    set_fact:
      anarchy_namespace: >-
        {{ vars.catalog_item_params.__meta__.anarchy.namespace | default('anarchy-operator') }}
      guid: >-
        {{ vars.catalog_item_params.guid }}
      uuid: >-
        {{ vars.catalog_item_params.uuid }}
      resource_claim_name: >-
        {{ catalog_item_name }}-{{ vars.catalog_item_params.guid }}

  - name: Get ResourceClaim by uuid label
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: poolboy.gpte.redhat.com/v1
      kind: ResourceClaim
      label_selectors:
      - uuid={{ uuid }}
    register: r_claim_by_uuid

  - name: Set resource_claim found by uuid
    when: r_claim_by_uuid.resources | length > 0
    set_fact:
      resource_claim: "{{ r_claim_by_uuid.resources[0] }}"

  - name: Fallback to find ResourceClaim by name
    when: resource_claim is undefined
    block:
    - name: Get all ResourceClaims
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
      register: r_all_claims

    - name: Set resource_claim
      vars:
        __claim_query: >-
          [?metadata.name==`{{ resource_claim_name | to_json }}`]|[0]
        __claim: >-
          {{ r_all_claims.resources | to_json | from_json
           | json_query(__claim_query)
          }}
      when: __claim != ''
      set_fact:
        resource_claim: "{{ __claim }}"

  - name: Delete with resource claim
    when: resource_claim is defined
    block:
    - name: Set subject_name and subject_namespace from claim
      vars:
        __subject: "{{ resource_claim.status.resources[0].state | default('') }}"
      when: __subject != ''
      set_fact:
        subject: "{{ __subject }}"
        subject_name: "{{ __subject.metadata.name }}"
        subject_namespace: "{{ __subject.metadata.namespace }}"

    - name: Delete resource claim {{ resource_claim_name }}
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: absent
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
        namespace: "{{ resource_claim.metadata.namespace }}"
        name: "{{ resource_claim.metadata.name }}"

    - name: Exit if not found
      when: subject is not defined
      block:
      - debug:
          msg: "No subject found for ResourceClaim."

      - name: Write tower information to yaml file
        copy:
          dest: "{{ output_dir }}/results.rc"
          content: |
            export SKIP_TOWER_LOGS=yes

      - meta: end_play

    - name: Wait for the Tower deployerJob to start in the AnarchySubject
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: anarchy.gpte.redhat.com/v1
        kind: AnarchySubject
        namespace: "{{ subject_namespace }}"
        name: "{{ subject_name }}"
      register: r_subject
      retries: "{{ wait_retries | default(30) }}"
      delay: 2
      until: >-
        'destroying' == r_subject.resources[0].spec.vars.current_state|default('')

    - name: Set tower_host and tower_job
      set_fact:
        tower_host: "{{ __anarchy_subject.status.towerJobs.destroy.towerHost }}"
        tower_job: "{{ __anarchy_subject.status.towerJobs.destroy.deployerJob }}"
      vars:
        __anarchy_subject: "{{ r_subject.resources[0] }}"

  - name: Delete without resource claim
    when: resource_claim is undefined
    block:
    - name: Get AnarchySubjects
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: anarchy.gpte.redhat.com/v1
        kind: AnarchySubject
        namespace: "{{ anarchy_namespace }}"
      register: r_anarchy_subjects

    - name: Set subject_name and subject_namespace if anarchy subject found
      set_fact:
        subject: "{{ __subject }}"
        subject_name: "{{ __subject.metadata.name }}"
        subject_namespace: "{{ __subject.metadata.namespace }}"
      vars:
        __subject_query: >-
          [?
            metadata.annotations."poolboy.gpte.redhat.com/resource-claim-name"==`{{ resource_claim_name | to_json }}`
          ]|[0]
        __subject: "{{ r_anarchy_subjects.resources | json_query(__subject_query) }}"
      when: __subject != ''

    - name: Exit if not found
      when: subject is not defined
      block:
      - debug:
          msg: "No resource claim or subject found."

      - name: Write tower information to yaml file
        copy:
          dest: "{{ output_dir }}/results.rc"
          content: |
            export SKIP_TOWER_LOGS=yes

      - meta: end_play

    - name: Create destroy action for {{ subject_name }}
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          api_version: anarchy.gpte.redhat.com/v1
          kind: AnarchyAction
          metadata:
            # k8s module currently does not support generateName...
            # https://github.com/ansible-collections/community.kubernetes/issues/186
            # Need to generate a name while keeping the total length <= 63
            name: "{{ (subject_name ~ '-destroy-')[:58] ~ lookup('password', '/dev/null chars=ascii_lowercase,digits length=5') }}"
            namespace: "{{ subject_namespace }}"
          spec:
            action: destroy
            callbackToken: "{{ lookup('password', '/dev/null length=32 chars=hexdigits') }}"
            subjectRef:
              apiVersion: anarchy.gpte.redhat.com/v1
              kind: AnarchySubject
              name: "{{ subject_name }}"
              namespace: "{{ subject_namespace }}"

    - name: Wait for the new Tower deployerJob to start in the AnarchySubject
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: anarchy.gpte.redhat.com/v1
        kind: AnarchySubject
        namespace: "{{ subject_namespace }}"
        name: "{{ subject_name }}"
      register: r_subject
      retries: "{{ wait_retries | default(30) }}"
      delay: 2
      vars:
        deployer_job: "{{ r_subject.resources[0].status.towerJobs.destroy.deployerJob | default('') }}"
      # Wait until destroy deployerJob is set and is different from previous attempt
      until: >-
        deployer_job != '' and
        deployer_job != subject.status.towerJobs.destroy.deployerJob | default('')

    - name: Set tower_host and tower_job
      set_fact:
        tower_host: "{{ __anarchy_subject.status.towerJobs.destroy.towerHost }}"
        tower_job: "{{ __anarchy_subject.status.towerJobs.destroy.deployerJob }}"
      vars:
        __anarchy_subject: "{{ r_subject.resources[0] }}"

  - name: Write {{ output_dir }}/secrets/tower.rc
    import_tasks: tasks/write-tower-rc.yaml
