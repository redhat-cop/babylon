---
# This Ansible Playbook runs a status action
- name: Babylon Integration
  hosts: localhost
  gather_facts: false
  vars:
    # Vars to override as extra-vars
    account: CHANGEME
    catalog_item: CHANGEME
    catalog_stage: CHANGE ME dev|test|prod
    catalog_item_params_file: CHANGEME
    kubeconfig: CHANGEME

    # After that don't touch
    catalog_item_name: "{{ account | replace('_', '-') }}.{{ catalog_item | lower | regex_replace('_', '-') }}.{{ catalog_stage }}"

  tasks:
  - name: Get minimal ansible_facts
    ansible.builtin.gather_facts:
      gather_subset: min

  - name: Include vars
    include_vars:
      file: "{{ catalog_item_params_file }}"
      name: catalog_item_params

  - name: Show catalog_item_params
    debug:
      var: catalog_item_params
      verbosity: 2

  - name: Check that guid is set in catalog_item_params
    fail:
      msg: guid must be defined in catalog_item_params
    when: >-
      "guid" not in vars.catalog_item_params
      or vars.catalog_item_params.guid == ''

  - name: Check that uuid is set in catalog_item_params
    fail:
      msg: uuid must be defined in catalog_item_params
    when: >-
      "uuid" not in vars.catalog_item_params
      or vars.catalog_item_params.uuid == ''

  - name: Set vars from catalog_item_params
    set_fact:
      anarchy_namespace: >-
        {{ vars.catalog_item_params.__meta__.anarchy.namespace | default('anarchy-operator') }}
      guid: >-
        {{ vars.catalog_item_params.guid }}
      uuid: >-
        {{ vars.catalog_item_params.uuid }}
      resource_claim_name: >-
        {{ catalog_item_name }}-{{ vars.catalog_item_params.guid }}

  - name: Get ResourceClaim by uuid label
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: poolboy.gpte.redhat.com/v1
      kind: ResourceClaim
      label_selectors:
      - uuid={{ uuid }}
    register: r_claim_by_uuid

  - name: Set resource_claim found by uuid
    when: r_claim_by_uuid.resources | length > 0
    set_fact:
      resource_claim: "{{ r_claim_by_uuid.resources[0] }}"

  - name: Fallback to find ResourceClaim by name
    when: resource_claim is undefined
    block:
    - name: Get all ResourceClaims
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
      register: r_all_claims

    - name: Set resource_claim
      vars:
        __claim_query: >-
          [?metadata.name==`{{ resource_claim_name | to_json }}`]|[0]
        __claim: >-
          {{ r_all_claims.resources | to_json | from_json
           | json_query(__claim_query)
          }}
      when: __claim != ''
      set_fact:
        resource_claim: "{{ __claim }}"

  - name: Report failure to find ResourceClaim
    when: resource_claim is undefined
    block:
      - debug:
          msg: "No resource claim found."

      - name: Write tower information to yaml file
        copy:
          dest: "{{ output_dir }}/results.rc"
          content: |
            export SKIP_TOWER_LOGS=yes

      - meta: end_play

  - name: Set subject_name and subject_namespace from claim
    vars:
      __subject: "{{ resource_claim.status.resources[0].state }}"
    set_fact:
      subject_name: >-
        {{ __subject.metadata.name }}
      subject_namespace: >-
        {{ __subject.metadata.namespace }}
      check_status_state: >-
        {{ __subject.spec.vars.check_status_state | default('') }}
      previous_status_complete_timestamp: >-
        {{ __subject.status.towerJobs.status.completeTimestamp | default('') }}

  - name: Create output_dir and secrets directories
    file:
      path: "{{ item }}"
      state: directory
      mode: 0700
    loop:
    - "{{ output_dir }}/output_dir"
    - "{{ output_dir }}/secrets"

  - name: Report status if run recently
    when:
    - previous_status_complete_timestamp != ''
    - previous_status_complete_timestamp > '%FT%TZ' | strftime(now(utc=True).strftime('%s') | int - 60)
    block:
    - name: Write status.txt
      copy:
        dest: "{{ output_dir }}/output_dir/status.txt"
        content: >-
          {{ __subject.spec.vars.status_messages | default([]) | join("\n") }}
      vars:
        __resource_claim: "{{ r_claim.resources[0] }}"
        __subject: "{{ __resource_claim.status.resources[0].state }}"

    - name: Write tower information to yaml file
      copy:
        dest: "{{ output_dir }}/results.rc"
        content: |
          export SKIP_TOWER_LOGS=yes

    - name: End with previous status
      meta: end_play

  - name: Update AnarchySubject to request status check
    when:
    - check_status_state != 'pending'
    - check_status_state != 'running'
    k8s:
      kubeconfig: "{{ kubeconfig }}"
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: "{{ subject_name }}"
      namespace: "{{ subject_namespace }}"
      definition:
        spec:
          vars:
            check_status_request_timestamp: "{{ ansible_facts.date_time.iso8601 }}"

  - name: Wait for the Tower deployerJob to complete
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: poolboy.gpte.redhat.com/v1
      kind: ResourceClaim
      namespace: "{{ resource_claim.metadata.namespace }}"
      name: "{{ resource_claim.metadata.name }}"
    register: r_claim
    retries: "{{ wait_retries | default(30) }}"
    delay: 2
    vars:
      __resource_claim: "{{ r_claim.resources[0] }}"
      __subject: "{{ __resource_claim.status.resources[0].state }}"
      __status_complete_timestamp: "{{ __subject.status.towerJobs.status.completeTimestamp | default('') }}"
    until: >-
      __status_complete_timestamp != '' and
      __status_complete_timestamp != previous_status_complete_timestamp

  - name: Set tower_host and tower_job
    set_fact:
      tower_host: "{{ __anarchy_subject.status.towerJobs[_action].towerHost }}"
      tower_job: "{{ __anarchy_subject.status.towerJobs[_action].deployerJob }}"
    vars:
      __anarchy_subject: "{{ r_claim.resources[0].status.resources[0].state }}"

  - name: Write {{ output_dir }}/secrets/tower.rc
    import_tasks: tasks/write-tower-rc.yaml

  - name: Write status.txt
    copy:
      dest: "{{ output_dir }}/output_dir/status.txt"
      content: >-
        {{ __subject.spec.vars.status_messages | default([]) | join("\n") }}
    vars:
      __resource_claim: "{{ r_claim.resources[0] }}"
      __subject: "{{ __resource_claim.status.resources[0].state }}"
