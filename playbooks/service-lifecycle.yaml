---
# This Ansible Playbook show how to stop a service in Babylon.
# desired_state = started | stopped
- name: Babylon Integration
  hosts: localhost
  gather_facts: false
  vars:
    # Vars to override as extra-vars
    account: CHANGEME
    catalog_item: CHANGEME
    catalog_stage: CHANGE ME dev|test|prod
    catalog_item_params_file: CHANGEME
    kubeconfig: CHANGEME

    # After that don't touch
    catalog_item_name: "{{ account | replace('_', '-') }}.{{ catalog_item | lower | regex_replace('_', '-') }}.{{ catalog_stage }}"

  tasks:
  - name: Git minimal facts
    ansible.builtin.setup:
      gather_subset: min

  - name: Check that _action is defined
    fail:
      msg: _action must be defined
    when: _action is not defined

  - name: Set desired_state
    set_fact:
      desired_state: >-
        {% if _action == 'stop' -%}
        stopped
        {%- elif _action == 'start' -%}
        started
        {%- endif %}

  - name: Include vars
    include_vars:
      file: "{{ catalog_item_params_file }}"
      name: catalog_item_params

  - name: Show catalog_item_params
    debug:
      var: catalog_item_params
      verbosity: 2

  - name: Check that guid is set in catalog_item_params
    fail:
      msg: guid must be defined in catalog_item_params
    when: >-
      "guid" not in vars.catalog_item_params
      or vars.catalog_item_params.guid == ''

  - name: Check that uuid is set in catalog_item_params
    fail:
      msg: uuid must be defined in catalog_item_params
    when: >-
      "uuid" not in vars.catalog_item_params
      or vars.catalog_item_params.uuid == ''

  - name: Set vars from catalog_item_params
    set_fact:
      anarchy_namespace: >-
        {{ vars.catalog_item_params.__meta__.anarchy.namespace | default('anarchy-operator') }}
      guid: >-
        {{ vars.catalog_item_params.guid }}
      uuid: >-
        {{ vars.catalog_item_params.uuid }}
      resource_claim_name: >-
        {{ catalog_item_name }}-{{ vars.catalog_item_params.guid }}

  - name: Get ResourceClaim by uuid label
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: poolboy.gpte.redhat.com/v1
      kind: ResourceClaim
      label_selectors:
      - uuid={{ uuid }}
    register: r_claim_by_uuid

  - name: Set resource_claim found by uuid
    when: r_claim_by_uuid.resources | length > 0
    set_fact:
      resource_claim: "{{ r_claim_by_uuid.resources[0] }}"

  - name: Fallback to find ResourceClaim by name
    when: resource_claim is undefined
    block:
    - name: Get all ResourceClaims
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
      register: r_all_claims

    - name: Set resource_claim
      vars:
        __claim_query: >-
          [?metadata.name==`{{ resource_claim_name | to_json }}`]|[0]
        __claim: >-
          {{ r_all_claims.resources | to_json | from_json
           | json_query(__claim_query)
          }}
      when: __claim != ''
      set_fact:
        resource_claim: "{{ __claim }}"

  - name: Report failure to find ResourceClaim
    when: resource_claim is undefined
    block:
      - debug:
          msg: "No resource claim found."

      - name: Write tower information to yaml file
        copy:
          dest: "{{ output_dir }}/results.rc"
          content: |
            export SKIP_TOWER_LOGS=yes

      - meta: end_play

  - name: Set subject_name and subject_namespace from claim
    vars:
      __subject: "{{ resource_claim.status.resources[0].state }}"
    set_fact:
      subject_name: "{{ __subject.metadata.name }}"
      subject_namespace: "{{ __subject.metadata.namespace }}"

  - name: Get current desired_state of the Anarchy Subject
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      kind: AnarchySubject
      name: "{{ subject_name }}"
      namespace: "{{ subject_namespace }}"
      api_version: anarchy.gpte.redhat.com/v1
    register: r_subject

  - when: r_subject.resources[0].spec.vars.current_state.endswith('-failed') | default('unknown')
    block:
      - debug:
          msg: "ERROR: Service current_state == 'provision-failed', cannot run {{ desired_state }} function."

      - name: Write tower information to yaml file
        copy:
          dest: "{{ output_dir }}/results.rc"
          content: |
            export SKIP_TOWER_LOGS=yes

      - meta: end_play

  - when: r_subject.resources[0].spec.vars.current_state | default('unknown') == desired_state
    block:
      - debug:
          msg: "Service is already in current_state == {{ desired_state }}"

      - name: Write tower information to yaml file
        copy:
          dest: "{{ output_dir }}/results.rc"
          content: |
            export SKIP_TOWER_LOGS=yes

      - meta: end_play

  - name: Update desired_state of the ResourceClaim
    k8s:
      kubeconfig: "{{ kubeconfig }}"
      kind: ResourceClaim
      name: "{{ resource_claim.metadata.name }}"
      namespace: "{{ resource_claim.metadata.namespace }}"
      api_version: poolboy.gpte.redhat.com/v1
      definition:
        spec:
          resources:
          - "{{ __resource | combine(__resource_patch, recursive=true) }}"
    vars:
      __resource: "{{ resource_claim.spec.resources[0] }}"
      __resource_patch: >-
        {%- if 'action_schedule' in __resource.template.spec.vars -%}
        {{ __resource_patch_action_schedule }}
        {%- else -%}
        {{ __resource_patch_desired_state }}
        {%- endif -%}
      __resource_patch_action_schedule:
        template:
          spec:
            vars:
              action_schedule:
                start: >-
                  {%- if desired_state == 'started' -%}
                  {{ ansible_date_time.iso8601 }}
                  {%- else -%}
                  {{ __resource.template.spec.vars.action_schedule.start | default(ansible_date_time.iso8601) }}
                  {%- endif -%}
                stop: >-
                  {%- if desired_state == 'started' -%}
                  {{ '%FT%TZ' | strftime(500 * 24 * 60 * 60 + ansible_date_time.epoch | int) }}
                  {%- else -%}
                  {{ ansible_date_time.iso8601 }}
                  {%- endif -%}
      __resource_patch_desired_state:
        template:
          spec:
            vars:
              desired_state: "{{ desired_state }}"

  - name: Wait for the Tower deployerJob to start
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: poolboy.gpte.redhat.com/v1
      kind: ResourceClaim
      namespace: "{{ resource_claim.metadata.namespace }}"
      name: "{{ resource_claim.metadata.name }}"
    register: r_claim
    retries: "{{ wait_retries | default(30) }}"
    delay: 2
    vars:
      __anarchy_subject: "{{ r_claim.resources[0].status.resources[0].state }}"
    until: >-
      'deployerJob' in __anarchy_subject.status.towerJobs[_action] | default({})

  - name: Set tower_host and tower_job
    set_fact:
      tower_host: "{{ __anarchy_subject.status.towerJobs[_action].towerHost }}"
      tower_job: "{{ __anarchy_subject.status.towerJobs[_action].deployerJob }}"
    vars:
      __anarchy_subject: "{{ r_claim.resources[0].status.resources[0].state }}"

  - name: Write {{ output_dir }}/secrets/tower.rc
    import_tasks: tasks/write-tower-rc.yaml
