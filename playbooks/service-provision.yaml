---
# This Ansible Playbook show how to add an Anarchy Subject through a Poolboy
- name: Babylon Integration
  hosts: localhost
  gather_facts: false
  vars:
    # Vars to override as extra-vars
    account: CHANGEME
    catalog_item: CHANGEME
    catalog_stage: CHANGE ME dev|test|prod
    catalog_item_params_file: CHANGEME
    kubeconfig: CHANGEME
    cloudforms_username: CHANGEME

    # After that don't touch
    user_namespace: user-{{ cloudforms_username | replace('_', '-') | replace('.', '-') }}
    catalog_item_name: "{{ account | replace('_', '-') }}.{{ catalog_item | lower | regex_replace('_', '-') }}.{{ catalog_stage }}"

  tasks:
  - name: Include vars
    include_vars:
      file: "{{ catalog_item_params_file }}"
      name: catalog_item_params

  - name: Show catalog_item_params
    debug:
      var: vars.catalog_item_params
      verbosity: 2

  - name: Check that guid is set in catalog_item_params
    fail:
      msg: guid must be defined in catalog_item_params
    when: >-
      "guid" not in vars.catalog_item_params
      or vars.catalog_item_params.guid == ''

  - name: Set vars from catalog_item_params
    set_fact:
      guid: >-
        {{ vars.catalog_item_params.guid }}
      # Take cloud_tags, but drop values to ignore, guid and uuid
      cloud_tags: >-
        {{ vars.catalog_item_params.cloud_tags | default('{}') | from_yaml
         | dict2items | json_query("[?key!='guid' && key!='uuid']") | items2dict }}
      resource_claim_name: >-
        {{ catalog_item_name }}-{{ vars.catalog_item_params.guid }}

  - name: Wait for AnarchyGovernor {{ catalog_item_name }} params sync
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchyGovernor
      namespace: anarchy-operator
      name: "{{ catalog_item_name }}"
    register: r_governor
    vars:
      # Check AnarchyGovernor vars that are not listed in params_to_variables
      check_governor_job_vars: >-
        {{ r_governor.resources[0].spec.vars.job_vars
         | dict2items
         | json_query(filter_var_query)
         | items2dict
        }}
      filter_var_query: >-
        [?!contains(`{{ filter_var_list | to_json }}`, key)]
      filter_var_list: >-
        {{ (vars.catalog_item_params.agnosticv_meta.params_to_variables | default({})).values() | list
         + ["agnosticv_meta"] }}
    failed_when: >-
      vars.catalog_item_params != vars.catalog_item_params | combine(check_governor_job_vars)
    until: r_governor is success
    delay: 5
    retries: 60

  - name: Create namespace for {{ cloudforms_username }}
    k8s:
      kubeconfig: "{{ kubeconfig }}"
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          annotations:
            openshift.io/description: User Namespace for {{ cloudforms_username }}
            openshift.io/display-name: "{{ user_namespace }}"
            openshift.io/requester: "{{ cloudforms_username }}"
          name: "{{ user_namespace }}"

  - name: Create ResourceClaim {{ resource_claim_name }}
    k8s:
      kubeconfig: "{{ kubeconfig }}"
      definition:
        apiVersion: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
        metadata:
          name: "{{ resource_claim_name }}"
          namespace: "{{ user_namespace }}"
        spec:
          resources:
          - provider:
              apiVersion: poolboy.gpte.redhat.com/v1
              kind: ResourceProvider
              name: babylon
              namespace: poolboy
            template:
              apiVersion: anarchy.gpte.redhat.com/v1
              kind: AnarchySubject
              metadata:
                annotations:
                  poolboy.gpte.redhat.com/resource-provider-name: babylon
                  poolboy.gpte.redhat.com/resource-provider-namespace: poolboy
                generateName: "{{ catalog_item_name }}-"
              spec:
                governor: "{{ catalog_item_name }}"
                vars:
                  # Indicate that environment should start if match to a stopped environment
                  desired_state: started
                  # Set job_vars, excluding "guid" and "uuid" and insert filtered "cloud_tags"
                  job_vars: >-
                    {{ vars.catalog_item_params | dict2items
                     | json_query("[?key!='guid' && key!='uuid' && key!='cloud_tags']")
                     | items2dict | combine({"cloud_tags": vars.cloud_tags}) }}

  - name: Report ResourceClaim
    debug:
      msg: "babylon.resourceClaim: {{ user_namespace }} {{ resource_claim_name }}"

  - block:
    - name: Wait for ResourceHandle to be assigned to ResourceClaim {{ resource_claim_name }}
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
        namespace: "{{ user_namespace }}"
        name: "{{ resource_claim_name }}"
      register: r_claim
      retries: 60
      delay: 5
      until: >-
        'resourceHandle' in r_claim.resources[0].status | default({})
    rescue:
    - name: Report failure waiting for ResourceHandle
      fail:
        msg: |-
         No ResourceHandle assigned to ResourceClaim {{ resource_claim_name }} in project namespace {{ user_namespace }}.
         Check poolboy logs:
           oc logs -n poolboy deployment/poolboy | fgrep {{ resource_claim_name }}

  - name: Report ResourceHandle
    debug:
      msg: "babylon.resourceHandle: {{ r_claim.resources[0].status.resourceHandle.name }}"

  - block:
    - name: Wait for AnarchySubject to appear in ResourceClaim {{ resource_claim_name }} status
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
        namespace: "{{ user_namespace }}"
        name: "{{ resource_claim_name }}"
      register: r_claim
      retries: 60
      delay: 5
      until: >-
        'state' in r_claim.resources[0].status.resources[0] | default({})
    rescue:
    - name: Report failure waiting for AnarchySubject
      fail:
        msg: |-
          No AnarchySubject created for ResourceHandle {{ r_claim.resources[0].status.resourceHandle.name }}.
          Check poolboy logs:
            oc logs -n poolboy deployment/poolboy | fgrep {{ r_claim.resources[0].status.resourceHandle.name }}

  - name: Set anarchy_subject_name
    set_fact:
      anarchy_subject_name: "{{ r_claim.resources[0].status.resources[0].state.metadata.name }}"

  - name: Report AnarchySubject
    debug:
      msg: "babylon.anarchySubject: {{ anarchy_subject_name }}"

  - block:
    - name: Wait for AnarchySubject current_state
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
        namespace: "{{ user_namespace }}"
        name: "{{ resource_claim_name }}"
      register: r_claim
      retries: 60
      delay: 5
      until: >-
        'current_state' in r_claim.resources[0].status.resources[0].state.spec.vars | default({})
    rescue:
    - name: Report failure waiting for AnarchySubject current_state
      fail:
        msg: |-
          AnarchySubject {{ anarchy_subject_name }} has not been handled by Anarchy.
          {% if __anarchy_subject.status.runStatus | default('') != '' %}
          Run status {{ __anarchy_subject.status.runStatus }}: {{ __anarchy_subject.status.runStatusMessage | default("no message") }}
          {% else %}
          Check anarchy-operator logs:
            oc logs -n anarchy-operator deployment/anarchy | fgrep {{ anarchy_subject_name }}
          Check for problems with AnarchyRun to process create of AnarchySubject:
            oc get anarchyruns -n anarchy-operator -l anarchy.gpte.redhat.com/subject={{ anarchy_subject_name }}
          {% endif %}
      vars:
        __anarchy_subject: "{{ r_claim.resources[0].status.resources[0].state | default({}) }}"

  - name: Report current state
    debug:
      msg: "babylon.currentState: {{ r_claim.resources[0].status.resources[0].state.spec.vars.current_state }}"

  - name: Report babylon assigned GUID
    debug:
      msg: "babylon.guid: {{ r_claim.resources[0].status.resources[0].state.spec.vars.job_vars.guid }}"

  - name: Report babylon assigned UUID
    debug:
      msg: "babylon.uuid: {{ r_claim.resources[0].status.resources[0].state.spec.vars.job_vars.uuid }}"

  - block:
    - name: Wait for Ansible Tower launch job to appear in AnarchySubject status
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
        namespace: "{{ user_namespace }}"
        name: "{{ resource_claim_name }}"
      register: r_claim
      retries: 60
      delay: 5
      until: >-
        'launchJob' in r_claim.resources[0].status.resources[0].state.status.towerJobs.provision | default({})
    rescue:
    - name: Report waiting for launch job to apper in the AnarchySubject status
      fail:
        msg: |-
          AnarchySubject {{ anarchy_subject_name }} has not started the dark-tower job-runner
          {% if __anarchy_subject.status.runStatus | default('') != '' %}
          Run status {{ __anarchy_subject.status.runStatus }}: {{ __anarchy_subject.status.runStatusMessage | default("no message") }}
          {% else %}
          Check AnarchyActions:
            oc get anarchyactions -n anarchy-operator -l anarchy.gpte.redhat.com/subject={{ anarchy_subject_name }}
          Check for problems with AnarchyRun for AnarchyAction:
            oc get anarchyruns -n anarchy-operator -l anarchy.gpte.redhat.com/subject={{ anarchy_subject_name }}
          {% endif %}
      vars:
        __anarchy_subject: "{{ r_claim.resources[0].status.resources[0].state | default({}) }}"

  - name: Set tower_launch_job
    set_fact:
      tower_launch_job: >-
        {{ r_claim.resources[0].status.resources[0].state.status.towerJobs.provision.launchJob }}

  - name: Report dark-tower job-runner Job
    debug:
      msg: >-
        babylon.launchJob: {{ tower_launch_job }}

  - name: Get Tower credentials and access information
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: v1
      kind: Secret
      namespace: anarchy-operator
      name: babylon-tower
    register: r_babylon_tower_secret

  - fail:
      msg: "babylon-tower secret not found"
    when: r_babylon_tower_secret.resources | length == 0

  - set_fact:
      babylon_tower_secret: "{{ r_babylon_tower_secret.resources[0] }}"

  - name: Save tower secret
    set_fact:
      tower_hostname: "{{ babylon_tower_secret.data.hostname | b64decode }}"
      tower_user: "{{ babylon_tower_secret.data.user | b64decode }}"
      tower_password: "{{ babylon_tower_secret.data.password | b64decode }}"

  - block:
    - name: Wait for AnarchySubject state provisioning or subsequent states
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
        namespace: "{{ user_namespace }}"
        name: "{{ resource_claim_name }}"
      register: r_claim
      retries: 60
      delay: 5
      until: >-
        r_claim.resources[0].status.resources[0].state.spec.vars.current_state | default('')
        in ['provisioning', 'started', 'starting', 'stopping', 'stopped']
    rescue:
    - name: Report failure waiting for provisioning state
      fail:
        msg: |-
          AnarchySubject {{ anarchy_subject_name }} has not moved to current_state of provisioning.
          {% if __anarchy_subject.status.runStatus | default('') != '' %}
          Run status {{ __anarchy_subject.status.runStatus }}: {{ __anarchy_subject.status.runStatusMessage | default("no message") }}
          {% else %}
          Check dark-tower job-runner:
            https://{{ tower_hostname }}/#/jobs/playbook/{{ tower_launch_job }}
          Check AnarchyRuns to see if callback event was not processed:
            oc get anarchyruns -n anarchy-operator -l anarchy.gpte.redhat.com/subject={{ anarchy_subject_name }}
          {% endif %}
      vars:
        __anarchy_subject: "{{ r_claim.resources[0].status.resources[0].state | default({}) }}"

  - name: Report current state
    debug:
      msg: >-
        babylon.currentState:
        {{ r_claim.resources[0].status.resources[0].state.spec.vars.current_state }}

  - block:
    - name: Wait for the Tower deployerJob to start
      k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
        namespace: "{{ user_namespace }}"
        name: "{{ resource_claim_name }}"
      register: r_claim
      retries: "{{ wait_retries | default(60) }}"
      delay: 5
      until: >-
        'deployerJob' in r_claim.resources[0].status.resources[0].state.status.towerJobs.provision | default({})
    rescue:
    - name: Report failure waiting for provisioning state
      fail:
        msg: |-
          AnarchySubject {{ anarchy_subject_name }} has does not have a deployerJob in its status.
          {% if __anarchy_subject.status.runStatus | default('') != '' %}
          Run status {{ __anarchy_subject.status.runStatus }}: {{ __anarchy_subject.status.runStatusMessage | default("no message") }}
          {% else %}
          Check dark-tower job-runner:
            https://{{ tower_hostname }}/#/jobs/playbook/{{ tower_launch_job }}
          Check AnarchyRuns for errors processing callback event:
            oc get anarchyruns -n anarchy-operator -l anarchy.gpte.redhat.com/subject={{ anarchy_subject_name }}
          {% endif %}
      vars:
        __anarchy_subject: "{{ r_claim.resources[0].status.resources[0].state | default({}) }}"

  - name: Save Tower provision deployerJob
    set_fact:
      tower_job: >-
        {{ r_claim.resources[0].status.resources[0].state.status.towerJobs.provision.deployerJob }}

  - name: Create output_dir/secrets
    file:
      path: "{{ output_dir }}/secrets"
      state: directory
      mode: u=rwx,go=

  - name: Write tower information to yaml file
    copy:
      dest: "{{ output_dir }}/secrets/tower.rc"
      content: |
        export TOWER_HOST={{ ("https://" ~ tower_hostname) | quote }}
        export TOWER_VERIFY_SSL=false
        export TOWER_USERNAME={{ tower_user | quote }}
        export TOWER_PASSWORD={{ tower_password | quote }}
        export TOWER_JOB={{ tower_job | quote }}
