---
# This Ansible Playbook show how to add an Anarchy Subject through a Poolboy
# ResourceHandle and ResourceClaim while setting an explicit GUID.
- name: Babylon Integration
  hosts: localhost
  gather_facts: false
  vars:
    # Vars to override as extra-vars
    account: CHANGEME
    catalog_item: CHANGEME
    catalog_stage: CHANGE ME dev|test|prod
    catalog_item_params_file: CHANGEME
    kubeconfig: CHANGEME
    cloudforms_username: CHANGEME

    # After that don't touch
    user_namespace: user-{{ cloudforms_username | replace('.', '-') }}
    catalog_item_name: "{{ account | replace('_', '-') }}.{{ catalog_item | lower | regex_replace('_', '-') }}.{{ catalog_stage }}"


    poolboy_resource_definition:
      provider:
        apiVersion: poolboy.gpte.redhat.com/v1
        kind: ResourceProvider
        name: babylon
        namespace: poolboy
      template:
        apiVersion: anarchy.gpte.redhat.com/v1
        kind: AnarchySubject
        metadata:
          annotations:
            poolboy.gpte.redhat.com/resource-provider-name: babylon
            poolboy.gpte.redhat.com/resource-provider-namespace: poolboy
          generateName: "{{ catalog_item_name }}-"
        spec:
          governor: "{{ catalog_item_name }}"
          vars:
            desired_state: started
            job_vars: "{{ vars.catalog_item_params }}"

  tasks:
  - name: Include vars
    include_vars:
      file: "{{ catalog_item_params_file }}"
      name: catalog_item_params

  - debug:
      var: catalog_item_params
      verbosity: 2

  - fail:
      msg: GUID must be defined
    when: >-
      "guid" not in catalog_item_params
      or catalog_item_params.guid == ''


  - name: Create namespace for {{ cloudforms_username }}
    k8s:
      kubeconfig: "{{ kubeconfig }}"
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          annotations:
            openshift.io/description: User Namespace for {{ cloudforms_username }}
            openshift.io/display-name: "{{ user_namespace }}"
            openshift.io/requester: "{{ cloudforms_username }}"
          name: "{{ user_namespace }}"

  - name: Create resource handle for GUID {{ catalog_item_params.guid }}
    k8s:
      kubeconfig: "{{ kubeconfig }}"
      definition:
        apiVersion: poolboy.gpte.redhat.com/v1
        kind: ResourceHandle
        metadata:
          labels:
            poolboy.gpte.redhat.com/resource-pool-name: babylon-explicit-guid
            guid: "{{ catalog_item_params.guid }}"
          name: guid-{{ catalog_item_params.guid }}
          namespace: poolboy
        spec:
          resources:
          - "{{ poolboy_resource_definition }}"

  - name: Create resource claim for GUID {{ catalog_item_params.guid }}
    k8s:
      kubeconfig: "{{ kubeconfig }}"
      definition:
        apiVersion: poolboy.gpte.redhat.com/v1
        kind: ResourceClaim
        metadata:
          labels:
            poolboy.gpte.redhat.com/resource-pool-name: babylon-explicit-guid
          name: "{{ catalog_item_name }}-{{ catalog_item_params.guid }}"
          namespace: "{{ user_namespace }}"
        spec:
          resources:
          - "{{ poolboy_resource_definition }}"

  - name: Get Tower credentials and access information
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: v1
      kind: Secret
      namespace: anarchy-operator
      name: babylon-tower
    register: r_babylon_tower_secret

  - fail:
      msg: "babylon-tower secret not found"
    when: r_babylon_tower_secret.resources | length == 0

  - set_fact:
      babylon_tower_secret: "{{ r_babylon_tower_secret.resources[0] }}"

  - name: Save tower secret
    set_fact:
      tower_hostname: "{{ babylon_tower_secret.data.hostname | b64decode }}"
      tower_user: "{{ babylon_tower_secret.data.user | b64decode }}"
      tower_password: "{{ babylon_tower_secret.data.password | b64decode }}"

  - name: Create output_dir/secrets
    file:
      path: "{{ output_dir }}/secrets"
      state: directory
      mode: 0700

  - name: Wait for the Tower deployerJob to start
    k8s_info:
      kubeconfig: "{{ kubeconfig }}"
      api_version: poolboy.gpte.redhat.com/v1
      kind: ResourceClaim
      namespace: "{{ user_namespace }}"
      name: "{{ catalog_item_name }}-{{ catalog_item_params.guid }}"
    register: r_claim
    retries: "{{ wait_retries | default(30) }}"
    delay: 2
    until: >-
      r_claim.resources|length == 1
      and 'status' in r_claim.resources[0]
      and 'resources' in r_claim.resources[0].status
      and r_claim.resources[0].status.resources|length > 0
      and 'state' in r_claim.resources[0].status.resources[0]
      and 'status' in r_claim.resources[0].status.resources[0].state
      and 'towerJobs' in r_claim.resources[0].status.resources[0].state.status
      and 'provision' in r_claim.resources[0].status.resources[0].state.status.towerJobs
      and 'deployerJob' in (r_claim.resources[0].status.resources[0]
                           .state.status.towerJobs.provision)


  - name: Save Tower provision job
    set_fact:
      tower_job: >-
        {{ r_claim.resources[0].status.resources[0]
        .state.status.towerJobs.provision.deployerJob }}


  - name: Write tower information to yaml file
    copy:
      dest: "{{ output_dir }}/secrets/tower.rc"
      content: |
        export TOWER_HOST="https://{{ tower_hostname }}"
        export TOWER_VERIFY_SSL=false
        export TOWER_USERNAME={{ tower_user | to_json }}
        export TOWER_PASSWORD={{ tower_password | to_json }}
        export TOWER_JOB={{ tower_job | to_json }}
